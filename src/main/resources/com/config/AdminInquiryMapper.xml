<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="admin.InquiryMapper">

    <select id="cntAllInquiry" resultType="int" parameterType="hashmap">
        select count(*)
        from INQUIRY
        <if test="sch != null">
            where title like concat('%', #{sch}, '%')
        </if>
        /*limit ${perPage} offset ${offset}*/
    </select>

    <select id="selectAllInquiry" resultType="InquiryDTO" parameterType="hashmap">
        select t.i_idx, t.m_idx, t.category_id, t.title, t.content, t.upload_date, t.last_updated_date, t.i_idx2, t.status, m.userid, m.username
        from (
            select inquiry_idx as i_idx, m_idx, category_id, title, content,
            date_format(upload_date, "%m/%d") as upload_date, date_format(last_updated_date, "%m/%d") as last_updated_date, inquiry_idx2 as i_idx2,
            case
            when inquiry_idx2 is null then inquiry_idx
            else inquiry_idx2
            end as inq_group,
            i_status as status
            from INQUIRY
        ) t
        left outer join MEMBER m on t.m_idx = m.m_idx
        where t.status like concat('%', #{status}, '%')
            and category_id like concat('%', #{category}, '%')
        <if test="sch != null">
            and title like concat('%', #{sch}, '%')
        </if>
        order by inq_group desc, i_idx
        /*limit ${perPage} offset ${offset}*/
    </select>

    <select id="selectOneInquiry" resultType="InquiryDTO" parameterType="int">
        select inquiry_idx as i_idx,
               m_idx,
               category_id,
               title,
               content,
               date_format(upload_date, "%Y-%m-%d %H:%i") as upload_date,
               date_format(last_updated_date, "%Y-%m-%d %H:%i") as last_updated_date,
               inquiry_idx2 as i_idx2,
               i_status as status
        from INQUIRY
        where inquiry_idx = #{idx}
    </select>

    <select id="showAllComment" parameterType="int" resultType="CommentDTO">
        select c1.comment_idx as c_idx,
        c1.i_idx,
        c1.comment,
        c1.m_idx,
        date_format(c1.post_date, "%Y/%m/%d %H:%i") as post_date,
        c2.count_sub
        from COMMENT c1 left outer join
        (select comment_idx2, count(*) count_sub from COMMENT group by comment_idx2) c2
        on c1.comment_idx = c2.comment_idx2
        where c1.i_idx = #{i_idx} and c1.comment_idx2 is NULL
    </select>

    <select id="showSubComment" parameterType="int" resultType="CommentDTO">
        select comment_idx as c_idx,
        i_idx, m_idx,
        comment,
        date_format(post_date, "%Y/%m/%d %H:%i") as post_date,
        comment_idx2 as c_idx2
        from COMMENT
        where comment_idx2 = ${c_idx} and i_idx = ${i_idx}
    </select>

    <insert id="writeComment">
        insert into COMMENT (i_idx, m_idx, comment, post_date
        <if test="c_idx2 != 0">
            , comment_idx2
        </if>
        )
        values (
        #{i_idx},
        #{m_idx},
        #{comment},
        now()
        <if test="c_idx2 != 0">
            , #{c_idx2}
        </if>
        )
    </insert>

    <update id="updateComment" parameterType="CommentDTO">
        update COMMENT
        set comment = #{comment}
        where comment_idx = #{c_idx} and m_idx = #{m_idx}
    </update>

    <delete id="deleteComment" parameterType="CommentDTO">
        delete from COMMENT
        where comment_idx = #{c_idx} and m_idx = #{m_idx}
    </delete>
    <delete id="deleteAllComments" parameterType="int">
        delete from COMMENT
        where i_idx = #{i_idx}
    </delete>
    <update id="updateStatusDeleted">
        update COMMENT
        set comment = ''
        where comment_idx = #{c_idx} and m_idx = #{m_idx}
    </update>
    <select id="countReComments" parameterType="int" resultType="int">
        select count(*)
        from COMMENT
        where comment_idx2 = #{c_idx}
    </select>

    <update id="updateUserInquiryStatus" parameterType="InquiryDTO">
        update INQUIRY
        <set>
            i_status = #{status}
        </set>
        where inquiry_idx = #{i_idx}
    </update>
</mapper>
